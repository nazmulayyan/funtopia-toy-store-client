[
    {
    "question":"What is an access token and refresh token? How do they work and where should we store them on the client-side?",
    "answer":" Access Token:An access token is a credential that is issued by an authentication server to a client application after a successful authentication process. It is used to authenticate and authorize requests made by the client to access protected resources on a server. The access token typically contains information about the user and their permissions.Refresh Token:A refresh token is a long-lived credential that is also issued during the authentication process. It is used to obtain a new access token when the current one expires. Refresh tokens have a longer lifespan compared to access tokens. They help maintain user sessions without requiring the user to re-authenticate every time the access token expires.How they work:Authentication: The client sends the user's credentials (such as username and password) to the authentication server.Token issuance: If the credentials are valid the authentication server generates an access token and a refresh token and sends them back to the client.Access token usage: The client includes the access token in each request to the server's protected resources typically in the Authorization header or as a query parameter.Server validation: The server receives the request and validates the access token to ensure it is not expired and has the necessary permissions to access the requested resource. Token expiration: Access tokens have a limited lifespan. When an access token expires the client can use the refresh token to request a new access token from the authentication server.Token refresh: The client sends the refresh token to the authentication server which verifies its validity. If the refresh token is valid the authentication server generates a new access token and sends it back to the client. Repeat process: The client continues to use the new access token to make authenticated requests until it expires at which point it repeats the token refresh process using the refresh token.Storage on the client-side: Access Token: Access tokens are typically stored on the client-side in browser memory or a client-side storage mechanism like sessionStorage. This allows the client to easily access and include the token in each request. It is important to note that storing sensitive tokens in browser memory can be vulnerable to certain attacks so appropriate security measures should be taken.Refresh Token: Refresh tokens are more sensitive and long-lived. They should be stored securely on the client-side preferably in an HTTP-only cookie or secure storage mechanisms provided by the platform (e.g. iOS Key chain Android KeyStore). Storing refresh tokens in secure storage helps mitigate the risk of token leakage or unauthorized access",
    "picture": "https://shorturl.at/stW04"
    },
    {
    "question":"Compare SQL and NoSQL databases?",
    "answer":"SQL (Structured Query Language) and NoSQL (Not Only SQL) are two broad categories of database management systems that differ in their data models query languages and usage scenarios. Here's a comparison of SQL and NoSQL databases: Data Model: SQL Databases: SQL databases follow a structured tabular data model. Data is organized into tables with predefined schemas and relationships between tables are established using foreign keys. NoSQL Databases: NoSQL databases offer various data models including key-value document columnar and graph. These models provide flexibility to store and retrieve unstructured or semi-structured data.Scalability:SQL Databases: SQL databases are vertically scalable meaning they can handle increased workload by adding more resources to a single server. However, scaling beyond the capacity of a single server can be challenging. NoSQL Databases: NoSQL databases are designed for horizontal scalability. They can distribute data across multiple servers allowing for easier scaling and handling of large amounts of data and high traffic loads.Schema Flexibility: SQL Databases: SQL databases enforce a rigid schema where the structure of the data is defined before inserting records. Any changes to the schema may require altering the table structure and potentially migrating existing data. NoSQL Databases: NoSQL databases provide schema flexibility. They allow for dynamic and schema-less data, where individual records within a collection or document can have different structures or fields. Query Language: SQL Databases: SQL databases use the SQL query language for defining and manipulating the data. SQL offers a standardized declarative language for querying and manipulating structured data. NoSQL Databases: NoSQL databases have their own query languages or APIs specific to their data models. For example, MongoDB uses the MongoDB Query Language (MQL) for document-based queries. ACID Transactions: SQL Databases: SQL databases support ACID (Atomicity, Consistency, Isolation, Durability) transactions, ensuring data integrity and reliability in complex transactional scenarios. NoSQL Databases: NoSQL databases vary in their support for transactions. Some NoSQL databases sacrifice full ACID guarantees in favor of performance and scalability. However they often provide eventual consistency or support for limited transactional operations. Use Cases: SQL Databases: SQL databases are well-suited for applications with structured data and complex relationships such as financial systems, content management and enterprise resource planning (ERP) systems. NoSQL Databases: NoSQL databases are suitable for handling large-scale rapidly evolving, or unstructured data making them a good fit for use cases like real-time analytics content caching social networks and IoT applications",
    "picture":"https://shorturl.at/fjoHU"
    },
    {
    "question":"What is express js? What is Nest JS",
    "answer":"Express.js is a popular and minimalist web application framework for Node.js. It provides a simple and flexible set of features for building web applications and APIs. Express.js is known for its unopinionated design allowing developers to have more control and flexibility in building their applications. It handles routing, middleware, and HTTP request/response handling making it easier to build server-side applications with Node.js Next JS on the other hand is a TypeScript-based progressive web application framework that combines elements of both Express.js and Angular. It is built on top of Express.js and provides a modular and scalable architecture for building server-side applications. NestJS incorporates features like dependency injection, decorators, and a powerful Command Line Interface (CLI) to streamline development and enable the use of Angular-like patterns in the backend. It aims to provide a cohesive development experience for both frontend and backend developers, leveraging TypeScript's strong typing and object-oriented programming concepts. NestJS embraces the concept of modules, controllers, and services, allowing developers to create well-organized and maintainable codebases. It also provides built-in support for features like authentication, validation, and logging, along with a powerful dependency injection system that promotes code reusability and testability. NestJS is often chosen for developing enterprise-level applications due to its architectural patterns, modularity, and scalability. It can be used for building various types of applications, including RESTful APIs, real-time applications, microservices, and more. Additionally, NestJS integrates well with other libraries and frameworks, making it a flexible choice for backend development in the Node.js ecosystem",
    "picture":"https://shorturl.at/qyKQV"
    },
    {
    "question":"What is MongoDB aggregate and how does it work ",
    "answer":"MongoDB's aggregate is a powerful framework that allows for data processing and analysis operations on collections of documents. It provides a way to perform advanced queries, transformations, and aggregations on MongoDB data. The aggregate framework works by defining a pipeline of stages, where each stage applies a specific operation or transformation to the data. The output of one stage serves as the input for the next stage in the pipeline. The stages are processed sequentially, allowing for complex data manipulations and computations. Here is an overview of how the MongoDB aggregate framewor works:Pipeline Stages: The aggregate pipeline consists of multiple stages, such as $match, $group, $sort, $project, $lookup, and more. Each stage performs a specific operation on the data. Stages can be used to filter documents, group documents based on specific criteria, reshape the data, perform calculations, join data from different collections, and more. Data Processing:The data is passed through the pipeline stages in the order they are defined. Each stage modifies the data based on its specific operation and criteria. The output of one stage serves as the input for the next stage, allowing for complex data transformations. Result: At the end of the pipeline, the final result is returned based on the operations performed. The result can be a single document, a set of documents, or aggregated values depending on the operations used. Aggregation Operators: MongoDB provides a wide range of aggregation operators to perform various operations in the pipeline stages. Aggregation operators include $match for filtering documents, $group for grouping and aggregating data, $sort for sorting results, $project for reshaping and projecting fields, $lookup for performing joins between collections, and many more.",
    "picture":"https://shorturl.at/kDNW6"
    }
]